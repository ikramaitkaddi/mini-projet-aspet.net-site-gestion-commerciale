#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MasterPageExample
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="gestion")]
	public partial class DCDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Définitions de méthodes d'extensibilité
    partial void OnCreated();
    partial void Insertcategorie(categorie instance);
    partial void Updatecategorie(categorie instance);
    partial void Deletecategorie(categorie instance);
    partial void Insertarticles(articles instance);
    partial void Updatearticles(articles instance);
    partial void Deletearticles(articles instance);
    partial void Insertclient(client instance);
    partial void Updateclient(client instance);
    partial void Deleteclient(client instance);
    partial void Insertpanier(panier instance);
    partial void Updatepanier(panier instance);
    partial void Deletepanier(panier instance);
    partial void Insertcommande_client(commande_client instance);
    partial void Updatecommande_client(commande_client instance);
    partial void Deletecommande_client(commande_client instance);
    partial void Insertadmin(admin instance);
    partial void Updateadmin(admin instance);
    partial void Deleteadmin(admin instance);
    #endregion
		
		public DCDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["gestionConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DCDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DCDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DCDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DCDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<categorie> categorie
		{
			get
			{
				return this.GetTable<categorie>();
			}
		}
		
		public System.Data.Linq.Table<articles> articles
		{
			get
			{
				return this.GetTable<articles>();
			}
		}
		
		public System.Data.Linq.Table<client> client
		{
			get
			{
				return this.GetTable<client>();
			}
		}
		
		public System.Data.Linq.Table<panier> panier
		{
			get
			{
				return this.GetTable<panier>();
			}
		}
		
		public System.Data.Linq.Table<commande_client> commande_client
		{
			get
			{
				return this.GetTable<commande_client>();
			}
		}
		
		public System.Data.Linq.Table<admin> admin
		{
			get
			{
				return this.GetTable<admin>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.categorie")]
	public partial class categorie : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _nom_categorie;
		
		private string _descrption;
		
		private EntitySet<articles> _articles;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void Onnom_categorieChanging(string value);
    partial void Onnom_categorieChanged();
    partial void OndescrptionChanging(string value);
    partial void OndescrptionChanged();
    #endregion
		
		public categorie()
		{
			this._articles = new EntitySet<articles>(new Action<articles>(this.attach_articles), new Action<articles>(this.detach_articles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nom_categorie", DbType="VarChar(50)")]
		public string nom_categorie
		{
			get
			{
				return this._nom_categorie;
			}
			set
			{
				if ((this._nom_categorie != value))
				{
					this.Onnom_categorieChanging(value);
					this.SendPropertyChanging();
					this._nom_categorie = value;
					this.SendPropertyChanged("nom_categorie");
					this.Onnom_categorieChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_descrption", DbType="VarChar(255)")]
		public string descrption
		{
			get
			{
				return this._descrption;
			}
			set
			{
				if ((this._descrption != value))
				{
					this.OndescrptionChanging(value);
					this.SendPropertyChanging();
					this._descrption = value;
					this.SendPropertyChanged("descrption");
					this.OndescrptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="categorie_articles", Storage="_articles", ThisKey="Id", OtherKey="categorie_id")]
		public EntitySet<articles> articles
		{
			get
			{
				return this._articles;
			}
			set
			{
				this._articles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_articles(articles entity)
		{
			this.SendPropertyChanging();
			entity.categorie = this;
		}
		
		private void detach_articles(articles entity)
		{
			this.SendPropertyChanging();
			entity.categorie = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.articles")]
	public partial class articles : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _nom_article;
		
		private System.Nullable<int> _prix_unitaire;
		
		private string _descreption;
		
		private System.Nullable<int> _categorie_id;
		
		private EntitySet<commande_client> _commande_client;
		
		private EntityRef<categorie> _categorie;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void Onnom_articleChanging(string value);
    partial void Onnom_articleChanged();
    partial void Onprix_unitaireChanging(System.Nullable<int> value);
    partial void Onprix_unitaireChanged();
    partial void OndescreptionChanging(string value);
    partial void OndescreptionChanged();
    partial void Oncategorie_idChanging(System.Nullable<int> value);
    partial void Oncategorie_idChanged();
    #endregion
		
		public articles()
		{
			this._commande_client = new EntitySet<commande_client>(new Action<commande_client>(this.attach_commande_client), new Action<commande_client>(this.detach_commande_client));
			this._categorie = default(EntityRef<categorie>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nom_article", DbType="VarChar(50)")]
		public string nom_article
		{
			get
			{
				return this._nom_article;
			}
			set
			{
				if ((this._nom_article != value))
				{
					this.Onnom_articleChanging(value);
					this.SendPropertyChanging();
					this._nom_article = value;
					this.SendPropertyChanged("nom_article");
					this.Onnom_articleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_prix_unitaire", DbType="Int")]
		public System.Nullable<int> prix_unitaire
		{
			get
			{
				return this._prix_unitaire;
			}
			set
			{
				if ((this._prix_unitaire != value))
				{
					this.Onprix_unitaireChanging(value);
					this.SendPropertyChanging();
					this._prix_unitaire = value;
					this.SendPropertyChanged("prix_unitaire");
					this.Onprix_unitaireChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_descreption", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string descreption
		{
			get
			{
				return this._descreption;
			}
			set
			{
				if ((this._descreption != value))
				{
					this.OndescreptionChanging(value);
					this.SendPropertyChanging();
					this._descreption = value;
					this.SendPropertyChanged("descreption");
					this.OndescreptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_categorie_id", DbType="Int")]
		public System.Nullable<int> categorie_id
		{
			get
			{
				return this._categorie_id;
			}
			set
			{
				if ((this._categorie_id != value))
				{
					if (this._categorie.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncategorie_idChanging(value);
					this.SendPropertyChanging();
					this._categorie_id = value;
					this.SendPropertyChanged("categorie_id");
					this.Oncategorie_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="articles_commande_client", Storage="_commande_client", ThisKey="Id", OtherKey="id_article")]
		public EntitySet<commande_client> commande_client
		{
			get
			{
				return this._commande_client;
			}
			set
			{
				this._commande_client.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="categorie_articles", Storage="_categorie", ThisKey="categorie_id", OtherKey="Id", IsForeignKey=true)]
		public categorie categorie
		{
			get
			{
				return this._categorie.Entity;
			}
			set
			{
				categorie previousValue = this._categorie.Entity;
				if (((previousValue != value) 
							|| (this._categorie.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._categorie.Entity = null;
						previousValue.articles.Remove(this);
					}
					this._categorie.Entity = value;
					if ((value != null))
					{
						value.articles.Add(this);
						this._categorie_id = value.Id;
					}
					else
					{
						this._categorie_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("categorie");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_commande_client(commande_client entity)
		{
			this.SendPropertyChanging();
			entity.articles = this;
		}
		
		private void detach_commande_client(commande_client entity)
		{
			this.SendPropertyChanging();
			entity.articles = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.client")]
	public partial class client : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _login;
		
		private string _e_mail;
		
		private string _adresse;
		
		private string _pass;
		
		private EntitySet<commande_client> _commande_client;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnloginChanging(string value);
    partial void OnloginChanged();
    partial void One_mailChanging(string value);
    partial void One_mailChanged();
    partial void OnadresseChanging(string value);
    partial void OnadresseChanged();
    partial void OnpassChanging(string value);
    partial void OnpassChanged();
    #endregion
		
		public client()
		{
			this._commande_client = new EntitySet<commande_client>(new Action<commande_client>(this.attach_commande_client), new Action<commande_client>(this.detach_commande_client));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_login", DbType="VarChar(50)")]
		public string login
		{
			get
			{
				return this._login;
			}
			set
			{
				if ((this._login != value))
				{
					this.OnloginChanging(value);
					this.SendPropertyChanging();
					this._login = value;
					this.SendPropertyChanged("login");
					this.OnloginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[e-mail]", Storage="_e_mail", DbType="VarChar(50)")]
		public string e_mail
		{
			get
			{
				return this._e_mail;
			}
			set
			{
				if ((this._e_mail != value))
				{
					this.One_mailChanging(value);
					this.SendPropertyChanging();
					this._e_mail = value;
					this.SendPropertyChanged("e_mail");
					this.One_mailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_adresse", DbType="VarChar(100)")]
		public string adresse
		{
			get
			{
				return this._adresse;
			}
			set
			{
				if ((this._adresse != value))
				{
					this.OnadresseChanging(value);
					this.SendPropertyChanging();
					this._adresse = value;
					this.SendPropertyChanged("adresse");
					this.OnadresseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pass", DbType="VarChar(100)")]
		public string pass
		{
			get
			{
				return this._pass;
			}
			set
			{
				if ((this._pass != value))
				{
					this.OnpassChanging(value);
					this.SendPropertyChanging();
					this._pass = value;
					this.SendPropertyChanged("pass");
					this.OnpassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="client_commande_client", Storage="_commande_client", ThisKey="Id", OtherKey="id_client")]
		public EntitySet<commande_client> commande_client
		{
			get
			{
				return this._commande_client;
			}
			set
			{
				this._commande_client.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_commande_client(commande_client entity)
		{
			this.SendPropertyChanging();
			entity.client = this;
		}
		
		private void detach_commande_client(commande_client entity)
		{
			this.SendPropertyChanging();
			entity.client = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.panier")]
	public partial class panier : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _nom_article;
		
		private System.Nullable<int> _prix_unitaire;
		
		private string _nom_categorie;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void Onnom_articleChanging(string value);
    partial void Onnom_articleChanged();
    partial void Onprix_unitaireChanging(System.Nullable<int> value);
    partial void Onprix_unitaireChanged();
    partial void Onnom_categorieChanging(string value);
    partial void Onnom_categorieChanged();
    #endregion
		
		public panier()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nom_article", DbType="VarChar(50)")]
		public string nom_article
		{
			get
			{
				return this._nom_article;
			}
			set
			{
				if ((this._nom_article != value))
				{
					this.Onnom_articleChanging(value);
					this.SendPropertyChanging();
					this._nom_article = value;
					this.SendPropertyChanged("nom_article");
					this.Onnom_articleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_prix_unitaire", DbType="Int")]
		public System.Nullable<int> prix_unitaire
		{
			get
			{
				return this._prix_unitaire;
			}
			set
			{
				if ((this._prix_unitaire != value))
				{
					this.Onprix_unitaireChanging(value);
					this.SendPropertyChanging();
					this._prix_unitaire = value;
					this.SendPropertyChanged("prix_unitaire");
					this.Onprix_unitaireChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nom_categorie", DbType="VarChar(100)")]
		public string nom_categorie
		{
			get
			{
				return this._nom_categorie;
			}
			set
			{
				if ((this._nom_categorie != value))
				{
					this.Onnom_categorieChanging(value);
					this.SendPropertyChanging();
					this._nom_categorie = value;
					this.SendPropertyChanged("nom_categorie");
					this.Onnom_categorieChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.commande_client")]
	public partial class commande_client : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _id_client;
		
		private System.Nullable<int> _id_article;
		
		private System.Nullable<int> _Num_banque;
		
		private EntityRef<articles> _articles;
		
		private EntityRef<client> _client;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void Onid_clientChanging(System.Nullable<int> value);
    partial void Onid_clientChanged();
    partial void Onid_articleChanging(System.Nullable<int> value);
    partial void Onid_articleChanged();
    partial void OnNum_banqueChanging(System.Nullable<int> value);
    partial void OnNum_banqueChanged();
    #endregion
		
		public commande_client()
		{
			this._articles = default(EntityRef<articles>);
			this._client = default(EntityRef<client>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_client", DbType="Int")]
		public System.Nullable<int> id_client
		{
			get
			{
				return this._id_client;
			}
			set
			{
				if ((this._id_client != value))
				{
					if (this._client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_clientChanging(value);
					this.SendPropertyChanging();
					this._id_client = value;
					this.SendPropertyChanged("id_client");
					this.Onid_clientChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_article", DbType="Int")]
		public System.Nullable<int> id_article
		{
			get
			{
				return this._id_article;
			}
			set
			{
				if ((this._id_article != value))
				{
					if (this._articles.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_articleChanging(value);
					this.SendPropertyChanging();
					this._id_article = value;
					this.SendPropertyChanged("id_article");
					this.Onid_articleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Num_banque", DbType="Int")]
		public System.Nullable<int> Num_banque
		{
			get
			{
				return this._Num_banque;
			}
			set
			{
				if ((this._Num_banque != value))
				{
					this.OnNum_banqueChanging(value);
					this.SendPropertyChanging();
					this._Num_banque = value;
					this.SendPropertyChanged("Num_banque");
					this.OnNum_banqueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="articles_commande_client", Storage="_articles", ThisKey="id_article", OtherKey="Id", IsForeignKey=true)]
		public articles articles
		{
			get
			{
				return this._articles.Entity;
			}
			set
			{
				articles previousValue = this._articles.Entity;
				if (((previousValue != value) 
							|| (this._articles.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._articles.Entity = null;
						previousValue.commande_client.Remove(this);
					}
					this._articles.Entity = value;
					if ((value != null))
					{
						value.commande_client.Add(this);
						this._id_article = value.Id;
					}
					else
					{
						this._id_article = default(Nullable<int>);
					}
					this.SendPropertyChanged("articles");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="client_commande_client", Storage="_client", ThisKey="id_client", OtherKey="Id", IsForeignKey=true)]
		public client client
		{
			get
			{
				return this._client.Entity;
			}
			set
			{
				client previousValue = this._client.Entity;
				if (((previousValue != value) 
							|| (this._client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._client.Entity = null;
						previousValue.commande_client.Remove(this);
					}
					this._client.Entity = value;
					if ((value != null))
					{
						value.commande_client.Add(this);
						this._id_client = value.Id;
					}
					else
					{
						this._id_client = default(Nullable<int>);
					}
					this.SendPropertyChanged("client");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.admin")]
	public partial class admin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _username;
		
		private string _pwd;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnpwdChanging(string value);
    partial void OnpwdChanged();
    #endregion
		
		public admin()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(20)")]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pwd", DbType="VarChar(20)")]
		public string pwd
		{
			get
			{
				return this._pwd;
			}
			set
			{
				if ((this._pwd != value))
				{
					this.OnpwdChanging(value);
					this.SendPropertyChanging();
					this._pwd = value;
					this.SendPropertyChanged("pwd");
					this.OnpwdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
